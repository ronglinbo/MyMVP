package com.example.ronglinbo.mymvp.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.example.ronglinbo.mymvp.en.LocalCacheDateInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LOCAL_CACHE_DATE_INFO".
*/
public class LocalCacheDateInfoDao extends AbstractDao<LocalCacheDateInfo, String> {

    public static final String TABLENAME = "LOCAL_CACHE_DATE_INFO";

    /**
     * Properties of entity LocalCacheDateInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CacheLevel = new Property(1, int.class, "cacheLevel", false, "CACHE_LEVEL");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property CacheType = new Property(3, String.class, "cacheType", false, "CACHE_TYPE");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
    }


    public LocalCacheDateInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LocalCacheDateInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_CACHE_DATE_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CACHE_LEVEL\" INTEGER NOT NULL ," + // 1: cacheLevel
                "\"CONTENT\" TEXT," + // 2: content
                "\"CACHE_TYPE\" TEXT," + // 3: cacheType
                "\"STATUS\" INTEGER NOT NULL );"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_CACHE_DATE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalCacheDateInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCacheLevel());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String cacheType = entity.getCacheType();
        if (cacheType != null) {
            stmt.bindString(4, cacheType);
        }
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalCacheDateInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCacheLevel());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String cacheType = entity.getCacheType();
        if (cacheType != null) {
            stmt.bindString(4, cacheType);
        }
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalCacheDateInfo readEntity(Cursor cursor, int offset) {
        LocalCacheDateInfo entity = new LocalCacheDateInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // cacheLevel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cacheType
            cursor.getInt(offset + 4) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalCacheDateInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCacheLevel(cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCacheType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalCacheDateInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(LocalCacheDateInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalCacheDateInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
